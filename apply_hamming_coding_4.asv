function apply_hamming_coding_4()
    % Παίρνουμε τα νέα μηνύματα μετά το CRC
    load('new_data_3.mat', 'new_data');
    
    num_messages = size(new_data, 1); % Θα είναι 100.000
    
    % Πίνακα που θα κρατά τα μηνύματα μετά το Hamming
    encoded_messages = zeros(num_messages, 56);
    
    for idx = 1:num_messages
        message = new_data(idx, :);
        
        % ΠΡΟΣΟΧΗ --> Στην εκφώνηση ζητά να γίνει κωδικοποιήση σε 24 bits
        % έγω στο προηγούμενο ερώτημα έβγαλα τα μηνύματα σε 32 bits.
        assert(length(message) == 32, 'Message length must be 32 bits.');
        
        % Καλούμε την παρακάτω συνάρτηση που κάνει Hamming encoding
        encoded_message = hamming_encode_32bits(message);
        
        encoded_messages(idx, :) = encoded_message;
    end

    % Αποθήκευση κάθε αποτελέσματος σε νέο .mat file
    save('encoded_messages.mat', 'encoded_messages');
end

%% Σε αυτήν την συνάρτηση κάνουμε Hamming κωδικοποιήση
% προσπάθησα να χρησιμοποιήσω την comm.HammingEncoder αλλά δεν
% υποστηρίζεται σε νέες εκδόσεις.
function encoded = hamming_encode_32bits(block)
    % Hamming(7,4) για κάθε 4-bit block, είναι η πιο γνωστή από τι είδα.
    n = 7;
    k = 4;
    
    % Προσοχή -->
    % Κάθε 4-bit θα κωδικοποιηθεί σε 7-bit κωδικολέξη.
    % Οπότε έχουμε μηνύματα με μέγεθος 32-bit άρα 32/4 = 8bit
    % Τελικά θα έχουμε 8 * 7 = 56 bit.
    encoded = zeros(1, 56); % Κάνουμε preallocate τον πίνακα
    
    for i = 1:8
        disp("==================================");
        disp("Original Message:");
        disp("--> " + block);
        disp("-- Process --")
        % Παίρνουμε το 4-bit κομμάτι
        segment = block((i-1) * 4 + 1:i * 4);
        disp("Segment " + i + ") " + block);
        
        % Encode το 4-bit segment σε 7-bit κωδικολέξη
        % code --> https://www.mathworks.com/help/comm/ref/encode.html
        segment_codeword = encode(segment, n, k, 'hamming/binary');
        
        % Αποθήκευση της 7-bit κωδικολέξη
        encoded((i-1) * 7 + 1:i * 7) = segment_codeword;
    end
end
